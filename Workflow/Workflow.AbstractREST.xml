<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2019.1 (Build 510U)" ts="2020-01-09 16:39:34">
<Class name="Workflow.AbstractREST">
<IncludeCode>%occErrors,%ZEN.Utils</IncludeCode>
<Super>%CSP.REST</Super>
<TimeChanged>65247,49907.301</TimeChanged>
<TimeCreated>63579,55873.869445</TimeCreated>

<Method name="DispatchRequest">
<Description><![CDATA[
Dispatch a REST request according to URL and Method.<br>
Add param Namespace to a request to execute in desired namespace. Package must be mapped there]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %response As %CSP.Response
	#dim %request As %CSP.Request
	#dim %session As %CSP.Session
	
	Do %response.SetHeader("Access-Control-Allow-Origin","*")
	Do %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS")
	Do %response.SetHeader("Access-Control-Max-Age","10000")
	Do %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization, Accept-Language") 
	 
	Set %response.ContentType="application/json"
	Set %session.Language=$$MatchLanguage^%occMessages(%request.GetCgiEnv("HTTP_ACCEPT_LANGUAGE"),"%CSP","+s") // Localization support
    
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
	    
	    set st = ..ConvertRequestBody()
	    If $$$ISERR(st) Do ..Http500(st) Quit
	    
	    //do %session.Login(
	    
	    // Desired execusion namespace
	    set Namespace = $get(%request.Data("Namespace",1))
	    set st = ..CheckNamespace(.Namespace)
	    If $$$ISERR(st) Do ..Http500(st) Quit
	    
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        Set tAccess2=$SYSTEM.Security.Check($Piece($zu(90,21,Namespace),"^",4))
        If ((tAccess'["READ,WRITE") || (tAccess2'["READ,WRITE"))
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit

            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Dispatch                
                if (Namespace'=$Namespace) {
                    set oldNS = $Namespace
                    zn Namespace
                    set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                    zn oldNS
                } else {
                    set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                }
                If $$$ISERR(tSC) Do ..Http500(tSC)
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (ex) {
        
        #; Issue a '500'
        Do ..Http500(ex.AsStatus())
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="ConvertRequestBody">
<Description>
Converts request into UTF8. Converts request into proxyObject. </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %request As %CSP.Request
	#dim obj As %ZEN.proxyObject

	return:'$isobject(%request.Content) $$$OK //empty request body - nothing to do
	
	// Convert request body into UTF8 proxyObject
	set content = %request.Content.Read($$$MaxStringLength)
	set content = $ZCVT(content,"I","UTF8") 
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,,.obj,1)
	return:$$$ISERR(st) st
	return:'$IsObject(obj) $$$ERROR($$$ArgumentIsNotAnObject,"Body")
	
	set %request.Content = obj // obj here is a valid UTF8 proxyObject with required property
	return $$$OK
]]></Implementation>
</Method>

<Method name="Http500">
<Description><![CDATA[
Issue an '500' error and give some indication as to what occurred.<br>
<b>pStatus</b> - %status, not %Exception.AbstractException.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStatus:%Exception.AbstractException</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // we are expecting status
    #; Set the response Http status
    set %response.Status="500 Internal Server Error"
    
    #; Return a helpful error string
    write "{""Error"":"_$$$ZENJSSTR($System.Status.GetErrorText(pStatus,%session.Language))_"}"
    return $$$OK
]]></Implementation>
</Method>

<Method name="CheckNamespace">
<Description><![CDATA[
Returns OK if namespace both exists and contains Workflow package.<br>
<b>Namespace</b> - name of namespace. Sets namespace variable to current namespace if empty or missing.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&Namespace:%String=$Namespace]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (Namespace = "") {
		set Namespace = $Namespace
		return $$$OK
	}
	
	return:('##class(%SYS.Namespace).Exists(Namespace)) $$$ERROR($$$NamespaceUnavailable,Namespace) 
	
	if Namespace'=$Namespace {
        set oldNS = $Namespace
        zn Namespace
        set exists = ##class(%Dictionary.CompiledClass).%ExistsId("Workflow.REST") 
        set isens = ##class(%EnsembleMgr).IsEnsembleNamespace()
        zn oldNS
        return:(isens=0) $$$ERROR($$$GeneralError, Namespace _ " is not an Ensemble Namespace")		
        return:(exists=0) $$$ERROR($$$GeneralError, "Workflow package is not mapped to " _ Namespace)		
	}
	
	return $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
This project creates the DispatchMethod used to dispatch the Url and Method to the associated target method
**/
]]></Content>
</UDLText>

<Method name="DispatchMap">
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>pIndex:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tStream As %Stream.TmpCharacter
    #dim tHandler As %XML.ImportHandler
    #dim tCompiledClass As %Dictionary.CompiledClass
    
    #dim tArgCount,tIndex,tI,tCounter As %Integer
    #dim tArgs,tChild,tClassName,tDispatch,tError,tMap,tMethod,tPattern,tPiece,tType,tUrl As %String
    
    Try {
        
        Set tClassName=%classname
        
        #; Don't run on base class
        If tClassName="Workflow.AbstractREST" Quit
       
        #; Find named XDATA block
        If ##class(%Dictionary.CompiledXData).%ExistsId(tClassName_"||UrlMap") {
            
            Set tCompiledClass=##class(%Dictionary.CompiledClass).%OpenId(tClassName,,.tSC)
            If '$IsObject(tCompiledClass)||$$$ISERR(tSC) Quit
            
            Set tIndex = tCompiledClass.XDatas.FindObjectId(tClassName_"||UrlMap")
            If tIndex="" Set tSC=$$$ERROR($$$XDataBlockMissing,tClassName,"UrlMap") Quit
        
            #; Get XDATA as stream
            Set tStream = tCompiledClass.XDatas.GetAt(tIndex).Data
            Do tStream.Rewind()
            
            #; Create an XML import handler ( use the internal handler )
            Set tHandler=##class(%XML.ImportHandler).%New("CacheTemp",$$$IntHandler) 
        
            #; Create the Entity Resolver
            Set tResolver=##class(%XML.SAX.XDataEntityResolver).%New(tClassName)
        
            #; Parse the XML data in the specfied stream
            Set tSC=##Class(%XML.SAX.Parser).ParseStream(tStream,tHandler,tResolver,,,"Schema")
            If $$$ISERR(tSC) Quit       
        
            #; Copy tree because handler will delete it's copy when it goes out of scope
            Merge tMap=^CacheTemp(tHandler.Tree)
    
            If $Data(tMap("error"))||$Data(tMap("warning")) {
                
                Set tSC=$$$ERROR($$$InvalidDispatchMap)
                For tType="error","warning" {       
                    Set tIndex = "" For {
                        Set tIndex=$Order(tMap(tType,tIndex),1,tError) If tIndex="" Quit
                        Set tSC=$$$ADDSC(tSC,$$$ERROR($$$GeneralError,tError))
                    }
                }
                Quit
            }
            
            #; Walk the xml and generate the routing map
            Set tChild="",tCounter=0 For {
                Set tChild=$Order(tMap(1,"c",tChild)) If tChild="" Quit
                Set tPattern="",tArgCount=0,tUrl=tMap(tChild,"a","Url")
                For tI=2:1:$Length(tUrl,"/") {
                    Set tPiece=$Piece(tUrl,"/",tI)
                    If $Extract(tPiece)=":" {
                        Set tPattern=tPattern_"/([^/]+)"
                    } else {
                        Set tPattern=tPattern_"/"_tPiece
                    }
                }
               
                Set tCounter=$Increment(tCounter),tMethod=tMap(tChild,"a","Method"),tDispatch=tMap(tChild,"a","Call")
                $$$GENERATE(" If pIndex="_tCounter_" Quit $ListBuild("""_tPattern_""","""_tMethod_""","""_tDispatch_""")")
            }
            $$$GENERATE(" Quit """"")
                
        } else {
            
            #; The specified class must have an XDATA Block named UrlMap
            Set tSC=$$$ERROR($$$XDataBlockMissing,tClassName,"UrlMap")
        }
        
    } Catch (e) {
        Set tSC=e.AsStatus()
    }
    
    Quit tSC
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
Called for a REST page in the event of a login being required
**/
]]></Content>
</UDLText>

<Method name="Login">
<ClassMethod>1</ClassMethod>
<FormalSpec>skipheader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do %response.SetHeader("Access-Control-Allow-Origin","*")
	Do %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS")
	Do %response.SetHeader("Access-Control-Max-Age","10000")
	Do %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization, Accept-Language")
	
	Set %response.CharSet = "utf-8"
	Set %response.ContentType="application/json"
	
	If (%request.GetCgiEnv("REQUEST_METHOD") = "OPTIONS"){
		Do %response.WriteHTTPHeader()
		Return $$$OK
	}
	
    #; Don't want the session token
    Set %response.OutputSessionToken=0
    
    #; Set the Http Status
    Set %response.Status="403 Forbidden"
    
    #; We want Basic authentication
    Do %response.SetHeader("WWW-Authenticate","Basic")
    
    #; Write out the header
    Do %response.WriteHTTPHeader()
    
    Write "{""Error"":""Access denied""}"
        
    #; Done
    Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
This is the Schema which defines the form of the dispatch map
**/
]]></Content>
</UDLText>

<XData name="Schema">
<Internal>1</Internal>
<Data><![CDATA[
<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" >

<xs:element name="Routes">
<xs:complexType>
<xs:sequence>
<xs:element name="Route" minOccurs="0" maxOccurs="unbounded">
<xs:complexType>
<xs:attribute name="Url"    type="string" use="required"/>
<xs:attribute name="Method" type="string" use="required"/>
<xs:attribute name="Call" type="call" use="required"/>
</xs:complexType>
</xs:element>
</xs:sequence>
</xs:complexType>
</xs:element>

<xs:simpleType name="call">
<xs:restriction base="xs:string">
<xs:pattern value="([%]?[a-zA-Z][a-zA-Z0-9]*(\.[a-zA-Z][a-zA-Z0-9]*)*:)?[%]?[a-zA-Z][a-zA-Z0-9]*"/>
</xs:restriction>
</xs:simpleType>

<xs:simpleType name="string">
<xs:restriction base="xs:string">
<xs:minLength value="1"/>
</xs:restriction>
</xs:simpleType>


</xs:schema>
]]></Data>
</XData>
</Class>


<Class name="Workflow.Main">
<IncludeCode>%occErrors,%ZEN.Utils</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>65358,59175.736951</TimeChanged>
<TimeCreated>63579,56755.780815</TimeCreated>

<Method name="ListTasksForUser">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	&sql(SELECT SqlQuery into :sql FROM %Dictionary.QueryDefinition WHERE Id='EnsLib.Workflow.Engine||ListTasksForCurrentUser')
 	set sql =$Replace(sql,"Worklist","EnsLib_Workflow.Worklist") //because we need to add schema. Tried: #SQLCompile Path=EnsLib_Workflow and Import EnsLib.Workflow 
	do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetTask">
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim task As EnsLib.Workflow.Worklist
	return:'##class(EnsLib.Workflow.Worklist).%ExistsId(Id) $$$ERROR($$$GeneralError,"Instance with that id does not exist")
    set task = ##class(EnsLib.Workflow.Worklist).%OpenId(Id,,.st)
    return:($$$ISERR(st)) st   
    set st = ##class(Workflow.jsonProvider).%ObjectToJSON(task)	
	return st
]]></Implementation>
</Method>

<Method name="GetPdfLink">
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		
	// Break id into two separate components
	set hl7ID=$piece(Id,"|",1)
	set orcPATH=$piece(Id,"|",2)
	
	// Retrieve HL7 message
	set hl7=##class(EnsLib.HL7.Message).%OpenId(hl7ID)
	
	// Instantiate pdf object as Stream FileBinary object
	// Write pdf object as a file
	
	set pdf=##class(%Stream.FileBinary).%New()
	
	// Create a file with timestamp in the filename
	set tFileDir = "C:\Users\pdoolub\devProjects\workflow\CSP\csp\healthshare\seslhd\workflow\pdf\"
	set tFileName = hl7ID_"_"_$replace($replace($ZDATETIME($ZTIMESTAMP,3,1,6)," ","_"),":","_")_".pdf"
	do pdf.LinkToFile(tFileDir_tFileName)
	do pdf.Write()
	
	for nOBX=1:1:hl7.GetValueAt(orcPATH_".OBXgrp(*)") {
		set segment=hl7.GetSegmentAt(orcPATH_".OBXgrp("_nOBX_").OBX")
		do segment.GetFieldStreamBase64(.pdf,"5(1).5")
	}
		
	do pdf.%Save()
	
	
	//Return URL of file generated as JSON
	/*
	set tJsonPayload = {}
	
	set tJsonPayload.pdfUrl = tFileDir_tFileName
	
	set tUrl = tJsonPayload.%ToJSON()
	quit tUrl*/
	
	//Return only filename
	quit tFileName
	
	
	
	// Remove after code above is completed
	//return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Workflow.REST">
<Super>Workflow.AbstractREST</Super>
<TimeChanged>65351,52109.860572</TimeChanged>
<TimeCreated>63579,55437.349631</TimeCreated>

<Parameter name="CHARSET">
<Type>String</Type>
<Default>utf-8</Default>
</Parameter>

<Parameter name="UseSession">
<Type>Integer</Type>
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/logout" Method="GET" Call="Logout"/>
<Route Url="/tasks" Method="GET" Call="GetTasks"/>
<Route Url="/tasks/:id" Method="GET" Call="GetTask"/>
<Route Url="/tasks/:id" Method="POST" Call="PostTask"/>
<Route Url="/test" Method="GET" Call="Test"/>
<Route Url="/viewreport/:id" Method="GET" Call="ViewReport"/>
</Routes>
]]></Data>
</XData>

<UDLText name="T">
<Content><![CDATA[
/*
/// This method will return the base64 content for viewing the report
ClassMethod ViewReport(id As %String) As %Status
{
	
	// Break id into two separate components
	set hl7ID=$piece(id,"|",1)
	set orcPATH=$piece(id,"|",2)
	
	// Retrieve HL7 message
	set hl7=##class(EnsLib.HL7.Message).%OpenId(hl7ID)
	
	// Instantiate pdf object as GlobalCharacter Stream object
	
	set pdf=##class(%Stream.GlobalCharacter).%New()
	//set pdf=##class(%Stream.GlobalBinary).%New()
	for nOBX=1:1:hl7.GetValueAt(orcPATH_".OBXgrp(*)") {
		set segment=hl7.GetSegmentAt(orcPATH_".OBXgrp("_nOBX_").OBX")
		do segment.GetFieldStreamRaw(.pdf,"5(1).5")
		//do segment.GetFieldStreamBase64(.pdf,"5(1).5")
	}
	//do pdf.%Save()
	//do pdf.%Close()

	//set %response.ContentType="application/pdf"
	//set %response.CharSet = ""
	//set %response.ContentType="text/html"
	//set %response.Expires=0
	//set %response.CONTENT="NO-CACHE"
	
	//Set %response.ContentLength=pdf.Size
	
	//Set %response.Status="200 OK"
	
	
	// Return PDF object as JSON
	
	set tJsonPayload = {}
	
	set tJsonPayload.pdfData = ##class(Workflow.jsonProvider).%ObjectToJSON(pdf)
	//set st = ##class(Workflow.jsonProvider).%ObjectToJSON(pdf)
	return tJsonPayload.%ToJSON()

	// Collect base64 stream content as JSON
	
	
	
	//set tJsonPayload.pdfData = st
	//set tJsonPayload.pdfData = "ABCDEFGHIJ"
	
	//this line of code could be the problem for pdf! 
	//do pdf.OutputToDevice()
	
	
	//Quit $$$OK
}*/
]]></Content>
</UDLText>

<Method name="ViewReport">
<Description>
This method will return the URL of the PDF that has been generated
Parameter id - represents the HL7 Message ID</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	return ##class(Workflow.Main).GetPdfLink(id)
]]></Implementation>
</Method>

<Method name="Logout">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %session As %CSP.Session
	set st = %session.Logout(1)
	set %session.EndSession = 1
	return st
]]></Implementation>
</Method>

<Method name="GetTasks">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	return ##class(Workflow.Main).ListTasksForUser()
]]></Implementation>
</Method>

<Method name="GetTask">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// if required to debug
	// verify if dummy global is set
	// loop until global exists
	// print process $job
	return ##class(Workflow.Main).GetTask(id)
]]></Implementation>
</Method>

<Method name="PostTask">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %request As %CSP.Request
	//#dim %request.Content As EnsLib.Workflow.Worklist
	#dim tTaskResponce As EnsLib.Workflow.TaskResponse
	
	// For EnsLib.Workflow.FormEngine compatibility
	set %request.Data("$ITEMID",1) = id
	set tTaskResponce = %request.Content.Task
	set tFormFields = tTaskResponce.%FormFields

	for i = 1:1:$L(tFormFields,",") {
		set tField = $P(tFormFields,",",i)
		if (tField '= "") {
			set %request.Data(tField,1) = tTaskResponce.%FormValues.GetAt(tField)
		}
	}
	return ##class(EnsLib.Workflow.FormEngine).%OnSubmit(tTaskResponce,.msq)
]]></Implementation>
</Method>

<Method name="Test">
<Description>
Test method</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    write "{""Status"": ""OK""}"
    return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Workflow.jsonProvider">
<Description>
Because we need processing of private (beginning with %) properties.</Description>
<Super>%ZEN.Auxiliary.jsonProvider</Super>
<TimeChanged>65247,49915.049</TimeChanged>
<TimeCreated>63580,52204.133097</TimeCreated>

<Method name="%ObjectToJSON">
<Description><![CDATA[
Write out the contents of object instance <var>pObject</var> to
the current device using JSON notation.
<var>pFormat</var> is a flags string to control output formatting options.</br>
The following character option codes are supported:<br/>
1-9 : indent with this number of spaces (4 is the default with the 'i' format specifier)<br/>
a - output null arrays/objects<br/>
b - line break before opening { of objects<br/>
c - output the Cach&eacute;-specific "_class" and "_id" properties<br/>
d - output Cach&eacute; numeric properties that have value "" as null<br/>
e - output empty object properties<br/>
i - indent with 4 spaces unless 't' or 1-9<br/>
l - output empty lists<br/>
n - newline (lf)<br/>
o - output empty arrays/objects<br/>
q - output numeric values unquoted even when they come from a non-numeric property<br/>
s - use strict JSON output - <strong>NOTE:</strong> special care should be taken when sending data to a browser, as using this flag 
may expose you to cross site scripting (XSS) vulnerabilities if the data is sent inside <code>&lt;script&gt;</code> tags. Zen uses
this technique extensively, so this flag should <strong>NOT</strong> be specified for jsonProviders in Zen pages.<br/>
t - indent with tab character<br/>
u - output pre-converted to UTF-8 instead of in native internal format<br/>
w - Windows-style cr/lf newline<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pObject:%RegisteredObject,&pVisited,pLevel:%Integer=0,pFormat:%String="aceloqtw"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		If ((pObject="")||'$IsObject(pObject)||($D(pVisited(pObject)))) {
			// cycle
			Write:pFormat["a"||'pLevel "null"
			Quit
		}
		Set pVisited(pObject) = ""
		Set tClass = $classname(pObject)
		If (tClass = "%ZEN.proxyObject") {
			Set tSC = pObject.%ToJSON(pLevel,pFormat)
			Quit
		}
		Set tLF=$S(pFormat["w":$C(13,10), pFormat["n":$C(10), 1:"")
		If pFormat'=$TR(pFormat,"it123456789") { Set tN=+$ZStrip(pFormat,"<E'N"), $P(tTab,$S(pFormat["t":$C(9),1:" "),1+$S(tN:tN,pFormat["t":1,1:4))="" }
		Else { Set tTab="" }
		Set tIncludeWhitespace = (tLF_tTab'="")

		If (pObject.%Extends("%Collection.AbstractList")) {
			Set tList = pObject
			Set tCount = tList.Count()
			If (pFormat["l" || tCount) {
				Write "["
				For n = 1:1:tCount {
					Set tValue = tList.GetAt(n)
					Write:n>1 ","
					If $IsObject(tValue) {
						If (tValue.%IsA("%ZEN.proxyObject")) {
							Set tSC = tValue.%ToJSON(pLevel+1,pFormat)
							Quit:$$$ISERR(tSC)
						} Else {
							Set tSC = ..%ObjectToJSON(tValue,.pVisited, pLevel+1, pFormat)
							Quit:$$$ISERR(tSC)
						}
					} Else {
						Write $$$ZENJSONVALUE(tValue,pFormat)
					}
				}
				Quit:$$$ISERR(tSC)
				If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Write tLF_tIndent
				Write "]"
			}
			Quit
		}
		ElseIf (pObject.%Extends("%Stream.Object")) {
			Write """"
			#; Initialize stream read length, if needed
			If '$data(tStreamMaxReadLen) Set tStreamMaxReadLen = ($$$MaxLocalLength\2)
			Do pObject.Rewind()
			While 'pObject.AtEnd {
				Write $$$ZENJSONESCAPE(pObject.Read(tStreamMaxReadLen),pFormat)
			}
			Write """"
			Quit
		}

		If pFormat["o" || 'pLevel {
			Set tPropCount = ""
			If (tIncludeWhitespace && pLevel) Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Write $S(pFormat["b":tLF_tIndent,1:" ")
			Write "{"
		} Else {
			Set tPropCount = 0
		}
		If pFormat["c" {
			// add class name to model
			Do nextProp
			Write $$$ZENJSONPAIR("_class",tClass,pFormat)
			// add id for persistent objects
			If (pObject.%IsA("%Library.Persistent")) {
				Do nextProp
				Set tID = pObject.%Id()
				Write $$$ZENJSONPAIR("_id",tID,pFormat)
			}
		}

		#; Special treatment for top-level array: output no matter what
		If pObject.%Extends("%Collection.AbstractArray") {
			#; write out (eligible) array elements/properties
			If pObject.%Extends("%Collection.AbstractArrayOfObj") {
				#; object elements
				Set tKey=""  For { Set tValue = pObject.GetNext(.tKey)  Quit:""=tKey
					If $IsObject(tValue) {
						If tValue.%Extends("%Stream.Object")||tValue.%Extends("%IO.I.Stream") {
							Do tValue.Rewind()
							If (pFormat["e" || tValue.Size()) {
								Do nextProp
								Write $$$ZENJSONPROP(tKey,pFormat)_":"""
								#; Initialize stream read length, if needed
								If '$data(tStreamMaxReadLen) Set tStreamMaxReadLen = ($$$MaxLocalLength\2)
								#; Rewind non-%IO streams if needed
								If tValue.AtEnd && tValue.%Extends("%Stream.Object") Do tValue.Rewind()
								While 'tValue.AtEnd {
									Write $$$ZENJSONESCAPE(tValue.Read(tStreamMaxReadLen),pFormat)
								}
								Write """"
							}
						} ElseIf pFormat["o" || ..hasObjContent(tValue,.pVisited,pFormat) {
							Do nextProp
							Write $$$ZENJSONPROP(tKey,pFormat)_":"
							Set tSC = ..%ObjectToJSON(tValue,.pVisited, pLevel+1,pFormat)
							Quit:$$$ISERR(tSC)
						}
					} ElseIf pFormat["a" {
						Do nextProp
						Write $$$ZENJSONPROP(tKey,pFormat)_":null"
					}
				} ; end tKey object array loop
			} Else {
				#; scalar array elements
				Set tKey=""  For { Set tValue = pObject.GetNext(.tKey)  Quit:""=tKey
					If (pFormat["e") || (tValue'="") {
						Do nextProp
						Write $$$ZENJSONPAIR(tKey,tValue,pFormat)
					}
				} ; end tKey scalar array loop
			}
			If tPropCount'=0 {
				#; either we wrote at least one property or we wrote an empty '{' due to "o" mode or level zero
				If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Write tLF_tIndent
				Write "}"
			}
			Quit
		}
		#; else: main object is not a collection

		#; loop over properties using class meta-data
		Do ..getOrderedProps(tClass,.tProps)
		Set tSeq="" For { Set tSeq=$O(tProps(tSeq),1,tPropName)  Quit:""=tSeq
		
			// Including private properties
			//Set tPrivate = +$$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPprivate)
			//Continue:tPrivate||(tPropName["%")

			Set tType = $$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPtype)
			Set tClsType = $$$getClassType(tType)
			Set tClientType = $$$comClassKeyGet(tType,$$$cCLASSclientdatatype)
			Set tCollection = $$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPcollection)
			If (tClsType '= "datatype") {
				#; Check for the case where we have a property declared as a %ListOf**
				If ($classmethod(tType,"%IsA","%Collection.AbstractList")) {
					Set tCollection = "list"
					If ($classmethod(tType,"%IsA","%Collection.AbstractListOfDT")) {
						#; Reset object information for %ListOfDataTypes
						Set tClientType = "VARCHAR"
						Set tDataType = ""
					}
				}
			} Else {
				Set tDataType=$Case(tClientType, "BOOLEAN":"b", "INTEGER":"n","NUMERIC":"n","FLOAT":"n", "TIMESTAMP":"u", "DATE":"d", "TIME":"t", :"")
			}
			Set tMultiDim = 0
			If (tCollection="array") {
				Set tCardinality = $$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPcardinality)
				Set tInverse = $$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPinverse)
				If ((tCardinality'="")&&(tInverse'="")) {
					// treat relationship as list
					Set tCollection = "list"
				}
			} ElseIf (tCollection = "") {
				Set tMultiDim = +$$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPmultidimensional)
			}
			Continue:tMultiDim

			Set tValue = $property(pObject,tPropName)
			#; If the value is "" or $c(0) and we are NOT including empty properties, skip if we are not a collection, object or stream
			If (((tValue = "") || (tValue = $c(0))) && (pFormat'["e") && (tCollection = "") && $Case(tClientType, "HANDLE": 0, "CHARACTERSTREAM": 0, "BINARYSTREAM": 0, :1)) {
				Continue
			}
			// Write the property if not inhibited
			If (tCollection="list") {
				// list collection
				If '$IsObject(tValue) {
					Set tCount = 0
				} Else {
					Set tList = tValue
					Set tCount = tList.Count()
				}
				If (pFormat["l" || tCount) {
					Do nextProp
					Write $$$ZENJSONPROP(tPropName,pFormat)_":["
					For n = 1:1:tCount {
						Set tValue = tList.GetAt(n)
						Write:n>1 ","
						If (tClientType = "HANDLE") {
							#; object items
							If $IsObject(tValue) {
								Set tSC = ..%ObjectToJSON(tValue,.pVisited, pLevel+1, pFormat)
								Quit:$$$ISERR(tSC)
							} Else {
								Write "null" ; not conditional because it has to hold the place in the list
							}
						} Else {
							#; scalar list item ; converts $List to empty string!
							Write $S(tDataType="b":$S(tValue:"true",1:"false")
								, ((tDataType="n")||(pFormat["q"))&&$$$ZENJSISNUM(tValue):$$$ZENJSNUM(tValue)
								, (tDataType="n")&&(tValue="")&&(pFormat["d"):"null"
								, ($C(0)=tValue)||$ListValid(tValue):""""""
								//, "dtu"[tDataType:$S(pFormat["u":$$$ZENJSUSTR(..formatDateTime(tValue,tType,tDataType,pFormat)), 1:$$$ZENJSSTR(..formatDateTime(tValue,tType,tDataType,pFormat)))
								, 1:$$$ZENJSONSTR(tValue,pFormat))
						}
					}
					Write "]"
				}
			}
			ElseIf (tCollection="array") {
				// array collection (object on client)
				If '$IsObject(tValue) {
					Set tKey = ""
				} Else {
					Set tArray = tValue
					Set tKey = tArray.Next("")
					If pFormat'["o" && (""'=tKey) {
						#; look ahead to see if there is any content
						Set tHasArrayContent=0, k=tKey  While (k '= "") { Set tValue = tArray.GetAt(k)
							If (tClientType = "HANDLE") {
								If $IsObject(tValue) {
									If ..hasObjContent(tValue,.pVisited,pFormat) Set tHasArrayContent=1  Quit
								} ElseIf (pFormat["a") {
									Set tHasArrayContent=1  Quit
								}
							} Else {
								If $S(tDataType="b":1
									, $C(0)=tValue||$ListValid(tValue):pFormat["e"
									//, "dtu"[tDataType:$S(pFormat["u":$$$ZENJSUSTR(..formatDateTime(tValue,tType,tDataType,pFormat)), 1:$$$ZENJSSTR(..formatDateTime(tValue,tType,tDataType,pFormat)))
									, 1:""'=tValue||(pFormat["e")) {
									Set tHasArrayContent=1  Quit
								}
							}
							Set k = tArray.Next(k)
						}
					}
				}
				If (pFormat["o" || (""'=tKey && tHasArrayContent)) {
					Do nextProp
					Write $$$ZENJSONPROP(tPropName,pFormat)_": {"
					Set n = 0
					While (tKey '= "") { Set tValue = tArray.GetAt(tKey)
						If (tClientType = "HANDLE") {
							#; object elements
							If $IsObject(tValue) {
								Set n = n+1
								Write $S(n>1:",",1:"")_$$$ZENJSONPROP(tKey,pFormat)_":"
								Set tSC = ..%ObjectToJSON(tValue,.pVisited, pLevel+1, pFormat)
								Quit:$$$ISERR(tSC)
							} ElseIf (pFormat["a") {
								Set n = n+1
								Write $S(n>1:",",1:"")_$$$ZENJSONPROP(tKey,pFormat)_":null"
							}
						} Else {
							#; scalar array item ; converts $List to empty string!
							Set tStr = $S(tDataType="b":$S(tValue:"true",1:"false")
								, ((tDataType="n")||(pFormat["q"))&&$$$ZENJSISNUM(tValue):$$$ZENJSNUM(tValue)
								, (tDataType="n")&&(tValue="")&&(pFormat["d"):"null"
								, ($C(0)=tValue)||$ListValid(tValue):""""""
								//, "dtu"[tDataType:$S(pFormat["u":$$$ZENJSUSTR(..formatDateTime(tValue,tType,tDataType,pFormat)), 1:$$$ZENJSSTR(..formatDateTime(tValue,tType,tDataType,pFormat)))
								, 1:$$$ZENJSONSTR(tValue,pFormat))
							If (pFormat["e") || (tStr'="""""") {
								Set n = n+1
								Write $S(n>1:",",1:"")_$$$ZENJSONPROP(tKey,pFormat)_":"_tStr
							}
						}
						Set tKey = tArray.Next(tKey)
					}
					Write "}"
				}
			}
			ElseIf (tClientType = "HANDLE") {
				// object
				If $IsObject(tValue) {
					If ..hasObjContent(tValue,.pVisited,pFormat) || (pFormat["o")  {
						Do nextProp
						Write $$$ZENJSONPROP(tPropName,pFormat)_":"
						Set tSC = ..%ObjectToJSON(tValue,.pVisited, pLevel+1, pFormat)
						Quit:$$$ISERR(tSC)
					}
				} ElseIf (pFormat["a") {
					Do nextProp
					Write $$$ZENJSONPROP(tPropName,pFormat)_":null"
				}
			}
			ElseIf (tClientType = "CHARACTERSTREAM") {
				If $IsObject(tValue) {
					If tValue.Size || (pFormat["e") {
						Do nextProp
						Write $$$ZENJSONPROP(tPropName,pFormat)_":"""
						If tValue.Size {
							#; Initialize stream read length, if needed
							If '$data(tStreamMaxReadLen) Set tStreamMaxReadLen = ($$$MaxLocalLength\2)
							Do tValue.Rewind()
							While 'tValue.AtEnd {
								Write $$$ZENJSONESCAPE(tValue.Read(tStreamMaxReadLen),pFormat)
							}
						}
						Write """"
					}
				} ElseIf (pFormat["a") {
					Do nextProp
					Write $$$ZENJSONPROP(tPropName,pFormat)_":null"
				}
			}
			ElseIf (tClientType = "BINARYSTREAM") {
				Do nextProp
				Write $$$ZENJSONPROP(tPropName,pFormat)_":null"
			}
			Else {
				#; scalar item ; converts $List to empty string!
				Set tStr = $S(tDataType="b":$S(tValue:"true",1:"false")
					, ((tDataType="n")||(pFormat["q"))&&$$$ZENJSISNUM(tValue):$$$ZENJSNUM(tValue)
					, (tDataType="n")&&(tValue="")&&(pFormat["d"):"null"
					, ($C(0)=tValue)||$ListValid(tValue):""""""
					//, "dtu"[tDataType:$S(pFormat["u":$$$ZENJSUSTR(..formatDateTime(tValue,tType,tDataType,pFormat)), 1:$$$ZENJSSTR(..formatDateTime(tValue,tType,tDataType,pFormat)))
					, 1:$$$ZENJSONSTR(tValue,pFormat))

				If (pFormat["e") || (tStr'="""""") {
					Do nextProp
					Write $$$ZENJSONPROP(tPropName,pFormat)_":"_tStr
				}
			}
		} ; end properties loop
		Quit:$$$ISERR(tSC)

		If tPropCount'=0 {
			#; either we wrote at least one property or we wrote an empty '{' due to "o" mode or level zero
			If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Write tLF_tIndent
			Write "}"
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	Quit tSC

nextProp
	If tPropCount=0 {
		If (tIncludeWhitespace && pLevel) Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Write $S(pFormat["b":tLF_tIndent,1:" ")
		Write "{"
	} ElseIf tPropCount {
		Write ","
	} ; else tPropCount="" means we already did the starting '{' due to "o" mode
	Set tPropCount = tPropCount + 1
	If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,pLevel+2)="" Write tLF_tIndent
	Quit
]]></Implementation>
</Method>
</Class>
</Export>
